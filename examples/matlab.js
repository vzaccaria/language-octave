/* parser generated by jison 0.4.15 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,3],$V1=[1,4],$V2=[1,5],$V3=[1,6],$V4=[2,1],$V5=[1,9,14,15,17,19,22,23,26,27,28,29,30,31,32,35,36,37,38,40,41,43,45],$V6=[1,22],$V7=[1,19],$V8=[1,20],$V9=[1,21],$Va=[1,25],$Vb=[9,17,19],$Vc=[1,26],$Vd=[9,17,19,45],$Ve=[1,27],$Vf=[9,17,19,43,45],$Vg=[1,28],$Vh=[1,29],$Vi=[9,17,19,40,41,43,45],$Vj=[1,30],$Vk=[1,31],$Vl=[1,32],$Vm=[1,33],$Vn=[9,17,19,35,36,37,38,40,41,43,45],$Vo=[1,34],$Vp=[1,35],$Vq=[9,17,19,22,23,35,36,37,38,40,41,43,45],$Vr=[1,36],$Vs=[1,37],$Vt=[1,38],$Vu=[1,39],$Vv=[1,40],$Vw=[1,41],$Vx=[1,42],$Vy=[9,17,19,22,23,26,27,28,29,30,31,32,35,36,37,38,40,41,43,45],$Vz=[1,43],$VA=[1,44],$VB=[9,14,15,17,19,22,23,26,27,28,29,30,31,32,35,36,37,38,40,41,43,45],$VC=[4,5,6,7,10],$VD=[1,67],$VE=[9,19];
var parser = {trace: function trace() {
        Jison.print.apply(null, arguments);
    },
yy: {},
symbols_: {"error":2,"primary_expression":3,"IDENTIFIER":4,"CONSTANT":5,"STRING_LITERAL":6,"(":7,"expression":8,")":9,"[":10,"]":11,"postfix_expression":12,"array_expression":13,"TRANSPOSE":14,"NCTRANSPOSE":15,"index_expression":16,":":17,"index_expression_list":18,",":19,"unary_expression":20,"unary_operator":21,"+":22,"-":23,"~":24,"multiplicative_expression":25,"*":26,"/":27,"^":28,"ARRAYMUL":29,"ARRAYDIV":30,"ARRAYRDIV":31,"ARRAYPOW":32,"additive_expression":33,"relational_expression":34,"<":35,">":36,"LE_OP":37,"GE_OP":38,"equality_expression":39,"EQ_OP":40,"NE_OP":41,"and_expression":42,"&":43,"or_expression":44,"|":45,"$accept":0,"$end":1},
terminals_: {2:"error",4:"IDENTIFIER",5:"CONSTANT",6:"STRING_LITERAL",7:"(",9:")",10:"[",11:"]",14:"TRANSPOSE",15:"NCTRANSPOSE",17:":",19:",",22:"+",23:"-",24:"~",26:"*",27:"/",28:"^",29:"ARRAYMUL",30:"ARRAYDIV",31:"ARRAYRDIV",32:"ARRAYPOW",35:"<",36:">",37:"LE_OP",38:"GE_OP",40:"EQ_OP",41:"NE_OP",43:"&",45:"|"},
productions_: [0,[3,1],[3,1],[3,1],[3,3],[3,2],[12,1],[12,1],[12,2],[12,2],[16,1],[16,1],[18,1],[18,3],[13,4],[20,1],[20,2],[21,1],[21,1],[21,1],[25,1],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[33,1],[33,3],[33,3],[34,1],[34,3],[34,3],[34,3],[34,3],[39,1],[39,3],[39,3],[42,1],[42,3],[44,1],[44,3],[8,1],[8,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
}
},
table: [{3:1,4:[1,2],5:$V0,6:$V1,7:$V2,10:$V3},{1:[3]},{1:$V4},o($V5,[2,2]),o($V5,[2,3]),{3:17,4:$V6,5:$V0,6:$V1,7:$V2,8:7,10:$V3,12:15,13:18,20:14,21:16,22:$V7,23:$V8,24:$V9,25:13,33:12,34:11,39:10,42:9,44:8},{11:[1,23]},{9:[1,24],17:$Va},o($Vb,[2,43],{45:$Vc}),o($Vd,[2,41],{43:$Ve}),o($Vf,[2,39],{40:$Vg,41:$Vh}),o($Vi,[2,36],{35:$Vj,36:$Vk,37:$Vl,38:$Vm}),o($Vn,[2,31],{22:$Vo,23:$Vp}),o($Vq,[2,28],{26:$Vr,27:$Vs,28:$Vt,29:$Vu,30:$Vv,31:$Vw,32:$Vx}),o($Vy,[2,20]),o($Vy,[2,15],{14:$Vz,15:$VA}),{3:17,4:$V6,5:$V0,6:$V1,7:$V2,10:$V3,12:45,13:18},o($VB,[2,6]),o($VB,[2,7]),o($VC,[2,17]),o($VC,[2,18]),o($VC,[2,19]),o($VB,$V4,{7:[1,46]}),o($V5,[2,5]),o($V5,[2,4]),{3:17,4:$V6,5:$V0,6:$V1,7:$V2,10:$V3,12:15,13:18,20:14,21:16,22:$V7,23:$V8,24:$V9,25:13,33:12,34:11,39:10,42:9,44:47},{3:17,4:$V6,5:$V0,6:$V1,7:$V2,10:$V3,12:15,13:18,20:14,21:16,22:$V7,23:$V8,24:$V9,25:13,33:12,34:11,39:10,42:48},{3:17,4:$V6,5:$V0,6:$V1,7:$V2,10:$V3,12:15,13:18,20:14,21:16,22:$V7,23:$V8,24:$V9,25:13,33:12,34:11,39:49},{3:17,4:$V6,5:$V0,6:$V1,7:$V2,10:$V3,12:15,13:18,20:14,21:16,22:$V7,23:$V8,24:$V9,25:13,33:12,34:50},{3:17,4:$V6,5:$V0,6:$V1,7:$V2,10:$V3,12:15,13:18,20:14,21:16,22:$V7,23:$V8,24:$V9,25:13,33:12,34:51},{3:17,4:$V6,5:$V0,6:$V1,7:$V2,10:$V3,12:15,13:18,20:14,21:16,22:$V7,23:$V8,24:$V9,25:13,33:52},{3:17,4:$V6,5:$V0,6:$V1,7:$V2,10:$V3,12:15,13:18,20:14,21:16,22:$V7,23:$V8,24:$V9,25:13,33:53},{3:17,4:$V6,5:$V0,6:$V1,7:$V2,10:$V3,12:15,13:18,20:14,21:16,22:$V7,23:$V8,24:$V9,25:13,33:54},{3:17,4:$V6,5:$V0,6:$V1,7:$V2,10:$V3,12:15,13:18,20:14,21:16,22:$V7,23:$V8,24:$V9,25:13,33:55},{3:17,4:$V6,5:$V0,6:$V1,7:$V2,10:$V3,12:15,13:18,20:14,21:16,22:$V7,23:$V8,24:$V9,25:56},{3:17,4:$V6,5:$V0,6:$V1,7:$V2,10:$V3,12:15,13:18,20:14,21:16,22:$V7,23:$V8,24:$V9,25:57},{3:17,4:$V6,5:$V0,6:$V1,7:$V2,10:$V3,12:15,13:18,20:58,21:16,22:$V7,23:$V8,24:$V9},{3:17,4:$V6,5:$V0,6:$V1,7:$V2,10:$V3,12:15,13:18,20:59,21:16,22:$V7,23:$V8,24:$V9},{3:17,4:$V6,5:$V0,6:$V1,7:$V2,10:$V3,12:15,13:18,20:60,21:16,22:$V7,23:$V8,24:$V9},{3:17,4:$V6,5:$V0,6:$V1,7:$V2,10:$V3,12:15,13:18,20:61,21:16,22:$V7,23:$V8,24:$V9},{3:17,4:$V6,5:$V0,6:$V1,7:$V2,10:$V3,12:15,13:18,20:62,21:16,22:$V7,23:$V8,24:$V9},{3:17,4:$V6,5:$V0,6:$V1,7:$V2,10:$V3,12:15,13:18,20:63,21:16,22:$V7,23:$V8,24:$V9},{3:17,4:$V6,5:$V0,6:$V1,7:$V2,10:$V3,12:15,13:18,20:64,21:16,22:$V7,23:$V8,24:$V9},o($VB,[2,8]),o($VB,[2,9]),o($Vy,[2,16],{14:$Vz,15:$VA}),{3:17,4:$V6,5:$V0,6:$V1,7:$V2,8:68,10:$V3,12:15,13:18,16:66,17:$VD,18:65,20:14,21:16,22:$V7,23:$V8,24:$V9,25:13,33:12,34:11,39:10,42:9,44:8},o($Vb,[2,44],{45:$Vc}),o($Vd,[2,42],{43:$Ve}),o($Vf,[2,40],{40:$Vg,41:$Vh}),o($Vi,[2,37],{35:$Vj,36:$Vk,37:$Vl,38:$Vm}),o($Vi,[2,38],{35:$Vj,36:$Vk,37:$Vl,38:$Vm}),o($Vn,[2,32],{22:$Vo,23:$Vp}),o($Vn,[2,33],{22:$Vo,23:$Vp}),o($Vn,[2,34],{22:$Vo,23:$Vp}),o($Vn,[2,35],{22:$Vo,23:$Vp}),o($Vq,[2,29],{26:$Vr,27:$Vs,28:$Vt,29:$Vu,30:$Vv,31:$Vw,32:$Vx}),o($Vq,[2,30],{26:$Vr,27:$Vs,28:$Vt,29:$Vu,30:$Vv,31:$Vw,32:$Vx}),o($Vy,[2,21]),o($Vy,[2,22]),o($Vy,[2,23]),o($Vy,[2,24]),o($Vy,[2,25]),o($Vy,[2,26]),o($Vy,[2,27]),{9:[1,69],19:[1,70]},o($VE,[2,12]),o($VE,[2,10]),o($VE,[2,11],{17:$Va}),o($VB,[2,14]),{3:17,4:$V6,5:$V0,6:$V1,7:$V2,8:68,10:$V3,12:15,13:18,16:71,17:$VD,20:14,21:16,22:$V7,23:$V8,24:$V9,25:13,33:12,34:11,39:10,42:9,44:8},o($VE,[2,13])],
defaultActions: {2:[2,1]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        function lex() {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}